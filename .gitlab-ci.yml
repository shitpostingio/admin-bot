image: registry.gitlab.com/shitposting/golang

variables:
  REPO_NAME: "gitlab.com/shitposting/admin-bot"

before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
  - printf "$SSH_PUBLIC_KEY" >> ~/.ssh/id_rsa.pub
  - chmod 700 ~/.ssh
  - chmod 600 ~/.ssh/id_rsa
  - chmod 644 ~/.ssh/id_rsa.pub
  - git config --global url.git@gitlab.com:.insteadOf https://gitlab.com/
  - ssh-add ~/.ssh/id_rsa
  - ssh-add -l
  - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts


stages:
  - format
  - test
  - build
  - staging
  - production

.exceptions: &exclude  # use <<: *exclude to add this rule to a job
  except:
    changes:
      - README.md
      - FEATURE.md
      - .gitignore
      - config_example.toml
      - run_gometalint.sh

go-fmt:
  stage: format
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
  <<: *exclude

      
lint_code:
  stage: format
  script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - go get -u golang.org/x/lint/golint
    - golint -set_exit_status $(go list ./... | grep -v /vendor/)
  allow_failure: true
  <<: *exclude

.race_detector:
  stage: test
  script:
    - go test -race -short $(go list ./... | grep -v "documentstore")
  <<: *exclude

test:
  stage: test
  script: 
#    - go test ./...
    - go test -race -short $(go list ./... | grep -v "documentstore")
  <<: *exclude

compile:
  stage: build
  script:
    - make build
  <<: *exclude
  artifacts:
    paths:
      - admin-bot
      
.test-deploy:
  stage: staging
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -p $PORT -o stricthostkeychecking=no $USER_ID@$HOSTNAME systemctl --user stop admin-bot
    - sshpass -e ssh -p $PORT -o stricthostkeychecking=no $USER_ID@$HOSTNAME mv /home/$USER_ID/go/bin/admin-bot /home/$USER_ID/go/bin/admin-bot_bak
    - sshpass -e scp -P $PORT -o stricthostkeychecking=no -r admin-bot $USER_ID@$HOSTNAME:/home/$USER_ID/go/bin/admin-bot
    - sshpass -e ssh -p $PORT -o stricthostkeychecking=no $USER_ID@$HOSTNAME systemctl --user start admin-bot
  <<: *exclude
      
.stop-unit:
  stage: staging
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -p $PORT -o stricthostkeychecking=no $USER_ID@$HOSTNAME systemctl --user stop admin-bot
  when: manual
  <<: *exclude
  
.start-unit:
  stage: staging
  script:
    - sshpass -V
    - export SSHPASS=$USER_PASS
    - sshpass -e ssh -p $PORT -o stricthostkeychecking=no $USER_ID@$HOSTNAME systemctl --user start admin-bot
  when: manual 
  <<: *exclude
  
prod-deploy:
  stage: production
  script:
    - sshpass -V
    - export SSHPASS=$PROD_USER_PASS
    - sshpass -e ssh -p $PROD_PORT -o stricthostkeychecking=no $PROD_USER_ID@$PROD_HOSTNAME systemctl --user stop admin-bot
    - sshpass -e ssh -p $PROD_PORT -o stricthostkeychecking=no $PROD_USER_ID@$PROD_HOSTNAME mv /home/$PROD_USER_ID/go/bin/admin-bot /home/$PROD_USER_ID/go/bin/admin-bot_bak
    - sshpass -e scp -P $PROD_PORT -o stricthostkeychecking=no -r admin-bot $PROD_USER_ID@$PROD_HOSTNAME:/home/$PROD_USER_ID/go/bin/admin-bot
    - sshpass -e ssh -p $PROD_PORT -o stricthostkeychecking=no $PROD_USER_ID@$PROD_HOSTNAME systemctl --user start admin-bot
  when: manual
  <<: *exclude
